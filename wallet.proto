syntax = "proto3";

enum Network {
    BITCOIN_SEGWIT_MAINNET = 0;
    BITCOIN_MAINNET = 1;
    BITCOIN_SEGWIT_TESTNET = 2;
    BITCOIN_TESTNET = 3;
    LITECOIN_SEGWIT_MAINNET = 4;
    LITECOIN_MAINNET = 5;
    LITECOIN_BTC_MAINNET = 6;
    LITECOIN_BTC_SEGWIT_MAINNET = 7;
    LITECOIN_TESTNET = 8;
    LITECOIN_SEGWIT_TESTNET = 9;
    ETHEREUM_MAINNET = 10;
    DOGECOIN_MAINNET = 11;
    DOGECOIN_BTC_MAINNET = 12;
    DOGECOIN_TESTNET = 13;
    DASH_MAINNET = 14;
    DASH_INVERTED_MAINNET = 15;
    DASH_BTC_MAINNET = 16;
    DASH_TESTNET = 17;
    DASH_INVERTED_TESTNET = 18;
    BITCOIN_CASH_MAINNET = 19;
    BLOCKCYPHER_TESTNET = 20;
}

enum CryptoProvider {
    option allow_alias = true;
    BLOCKCYPHER = 0;
    ESPLORA = 1;
    BLOCKSTREAM = 1;
    BTC_COM = 2;
    BLOCKCHAIN_INFO = 3; // NOT RECOMMENDED
    FULLNODE = 4;
}

message Wallet {
    // Address type (legacy, segwit, hex, ... detected by the first element of ADDRESS_MODE)
    Network network = 1;
    bytes encrypted_seed_phrase = 2;
    fixed32 height = 3;
    fixed32 receive_gap_limit = 4;
    fixed32 change_gap_limit = 5;
    repeated Address addresses = 6;
    repeated Transaction transactions = 7;
    CryptoProvider setting_default_crypto_provider = 8;
}

message Address {
  // We only generate compressed addresses.
  string address = 1;
  string pubkey = 2;
  string privkey = 3;
}

enum FeeMetric {
  BYTE = 0;
  VBYTE = 1;
  WEI = 2;
}


// Bitcoin-compatible fields
message BTCLikeTransaction {
  uint64 fee = 1;                     // in sats/byte or sats/vbyte
  repeated BTCLikeInput inputs = 2;   // List of inputs for the transaction
  repeated BTCLikeOutput outputs = 3; // List of outputs for the transaction
}

// Input for Bitcoin transaction
message BTCLikeInput {
  string txid = 1;                 // Transaction ID of the input UTXO
  uint32 index = 2;                // Index of the output in the referenced transaction
  uint64 amount = 3;               // Value of the input in the smallest unit of Bitcoin
  repeated bytes witness_data = 4; // Witness data (for SegWit inputs)
}

// Output for Bitcoin transaction
message BTCLikeOutput {
  uint64 amount = 1;          // Value of the output in the smallest unit of Bitcoin
  string address = 2;         // Recipient's address (could be Bitcoin or Ethereum address)
  uint64 index = 3;           // Output position (index) in the Transaction
  bool spent = 4;             // Has this output been spent?
}

// Ethereum-compatible fields
message ETHLikeTransaction {
  string txfrom = 1;                // Sender's address
  string txto = 2;                  // Recipient's address
  uint64 amount = 3;                // Amount of the transaction in the smallest unit of each blockchain
  // Gas price is recorded in "fee".
  uint64 gas = 4;                   // Amount of gas used by the transaction.
  bytes data = 5;                   // Input data for contract method calls (if applicable)
}

message Transaction {
  // Common transaction elements
  string txid = 1;               // Transaction ID or hash
  uint64 timestamp = 2;          // Timestamp of the transaction (Unix time)
  bool confirmed = 3;            // Has this transaction been confirmed?
  uint64 height = 4;             // Block height
  uint64 total_fee = 5;          // Transaction or gas fee (wei for Ethereum, sats for Bitcoin)
  FeeMetric fee_metric = 6;


  BTCLikeTransaction btclike_transaction = 15;
  ETHLikeTransaction ethlike_transaction = 14;
}
